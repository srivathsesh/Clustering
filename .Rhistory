USArrests
plot(Murder)
data("USArrests")
df <- data("USArrests")
df <- data("USArrests")
head(df)
df <- USArrests
head(df)
install.packages('cluster')
install.packages('factoextra')
df <- USArrests %>%
scale(.)
library(magrittr)
df <- USArrests %>%
scale(.)
hist(df[,1])
hist(df[,2])
hist(USArrests$Murder)
head(df)
fviz_nbclust(df, pam, method = "silhouette")
library(cluster)
library(factoextra)
fviz_nbclust(df, pam, method = "silhouette")
pam.res <- pam(df, 2)
pam.res
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
#ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
#ellipse.type = "t", # Concentration ellipse
#repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
#ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
#ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
pam.res <- pam(df, 3)
pam.res
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
#ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
colourpicker:::colourPickerAddin()
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07","#00FF55"), # color palette
#ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07","#00FF55"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07","#00FF55"), # color palette
ellipse.type = "level", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07","#00FF55"), # color palette
ellipse.type = "euclid", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07","#00FF55"), # color palette
ellipse.type = "norm", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 0,
ggtheme = theme_classic()
)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic()
)
pam.res <- pam(df, 2)
pam.res
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic()
)
#library(factoextra)
data("multishapes")
df <- multishapes[, 1:2]
set.seed(123)
km.res <- kmeans(df, 5, nstart = 25)
fviz_cluster(km.res, df,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
View(multishapes)
install.packages("fpc")
install.packages("dbscan")
set.seed(123)
db <- fpc::dbscan(df, eps = 0.15, MinPts = 5)
# Plot DBSCAN results
library("factoextra")
fviz_cluster(db, data = df, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
dbscan::kNNdistplot(df, k =  5)
abline(h = 0.15, lty = 2)
dbscan::kNNdistplot(df, k =  4)
abline(h = 0.15, lty = 2)
dbscan::kNNdistplot(df, k =  7)
abline(h = 0.15, lty = 2)
set.seed(123)
db <- fpc::dbscan(df, eps = 0.2, MinPts = 5)
# Plot DBSCAN results
library("factoextra")
fviz_cluster(db, data = df, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
set.seed(123)
db <- fpc::dbscan(df, eps = 0.13, MinPts = 5)
# Plot DBSCAN results
library("factoextra")
fviz_cluster(db, data = df, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
set.seed(123)
db <- fpc::dbscan(df, eps = 0.17, MinPts = 5)
# Plot DBSCAN results
library("factoextra")
fviz_cluster(db, data = df, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
set.seed(123)
db <- fpc::dbscan(df, eps = 0.15, MinPts = 5)
# Plot DBSCAN results
library("factoextra")
fviz_cluster(db, data = df, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
load("apphappyData.RData")
ls()
require(cluster)
require(useful)
require(Hmisc)
library(HSAUR)
library(MVA)
library(HSAUR2)
library(fpc)
library(mclust)
library(lattice)
library(car)
install.packages('HSAUR')
install.packages('MVA')
install.packages('HSAUR2')
numdata <- apphappy.2.num.frame
ls()
numdata <- apphappy.3.num.frame
dev.off()
str(numdata)
View(numdata)
head(numdata)
tail(numdata)
summary(numdata)
a=table(numdata$q1)
a
a=table(numdata$q57)
a
names(a)
barplot(a)
library(plyr)
temp <- count(numdata, c('numdata$q1','numdata$q2r1'))
str(temp)
b
b=table(numdata$q1,numdata$q2r1)
b
library(magrittr)
library(dplyr)
numdata %>% group_by(q1,q2r1) %>% summarise(counts = n())
require(corrplot)
numsubcorrelation <- cor(numsub)
numsub <- subset(numdata, select=c("q24r1","q24r2","q24r3","q25r1","q25r2","q25r3",
"q26r3","q26r4","q26r5"))
str(numsub)
summary(numsub)
a=table(numsub$q24r1)
a
barplot(a)
a=table(numsub$q24r1)
a=table(numsub$q25r1)
a
barplot(a)
b=table(numsub$q24r1,numsub$q25r1)
b
barplot(b)
numsubcorrelation <- cor(numsub)
corrplot(numsubcorrelation)
mcor <- cor(numsub)
corrplot(mcor, method="shade", shade.col=NA, tl.col="black")
corrplot(numsubcorrelation, method="shade", addCoef.col="black",
addCoefasPercent=TRUE ,type="lower", shade.col=NA, tl.col="black",
tl.srt=45, addcolorlabel="no", order="AOE",insig = "p-value")
corrplot(numsubcorrelation, method="shade", addCoef.col="black",
addCoefasPercent=TRUE ,type="lower", shade.col=NA, tl.col="black",
tl.srt=45, addcolorlabel="no", order="AOE",insig = "p-value")
wssplot <- function(numsub, nc=15, seed=1234) {
wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
numsub
######################################
### Create a Kmeans with 5 clusters
#########################################
clusterresults <- kmeans(numsub,5)
names(clusterresults)
clusterresults$withinss
clusterresults$tot.withinss
clusterresults$totss
clusterresults$betweenss
clusterresults$size
rsquare <- clusterresults$betweenss/clusterresults$totss
rsquare
plot(clusterresults, data=numsub)
fviz_cluster(clusterresults,palette = "jco",ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic())
fviz_cluster(clusterresults,palette = "jco",ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic(),)
fviz_cluster(clusterresults,palette = "jco",ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic(),data = numsub)
fviz_cluster(clusterresults,palette = "jco", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic(),data = numsub)
dissE <- daisy(numsub)
names(dissE)
dE2   <- dissE^2
sk2   <- silhouette(clusterresults$cluster, dE2)
str(sk2)
plot(sk2)
dev.off()
dissE <- daisy(numsub)
names(dissE)
dE2   <- dissE^2
sk2   <- silhouette(clusterresults$cluster, dE2)
str(sk2)
plot(sk2)
newdf <- as.data.frame(clusterresults$cluster)
write.csv(newdf, file = "clusterresults.csv")
write.csv(numsub, file = "numsub.csv")
newdf <- read.csv("clusterresults.csv")
combdata <- cbind(numsub,newdf,numdata$q1)
head(combdata)
require(reshape)
combdata <- rename(combdata, c(clusterresults.cluster="cluster"))
###################
## Model based clustering
##################
library(mclust)
fit <- Mclust(numsub,5)
plot(fit,data=numsub, what="density") # plot results
wssplot <- function(numsub, nc=15, seed=1234) {
#wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot <- function(numsub, nc=15, seed=1234) {
#wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
wssplot <- function(numsub, nc=15, seed=1234) {
#wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
wss <- 2:15
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
wssplot <- function(numsub, nc=15, seed=1234) {
#wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
wss <- 2:15
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(2:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
(nrow(numsub)-1)*sum(apply(numsub,2,var))
purrr::map(numsub,sd)
sum(purrr::map(numsub,var))
sum(purrr::map_dbl(numsub,var))
um(apply(numsub,2,var))
sum(apply(numsub,2,var))
clusterresults
as.data.frame(clusterresults$cluster)
View(numsub)
hclustmodel <- hclust(dist(numsub), method = 'complete')
plot(hclustmodel)
cut.5 <- cutree(hclustmodel, k=5)
plot(silhouette(cut.5,numsub.dist))
## Done with K Means, do the profile
########################################
## Hierarchical Clustering
########################################
numsub.dist = dist(numsub)
plot(hclustmodel)
cut.5 <- cutree(hclustmodel, k=5)
plot(silhouette(cut.5,numsub.dist))
require(cluster)
require(useful)
require(Hmisc)
library(HSAUR)
library(MVA)
library(HSAUR2)
library(fpc)
library(mclust)
library(lattice)
library(car)
numdata <- apphappy.3.num.frame
load('apphappyData.RData')
numdata <- apphappy.3.num.frame
str(numdata)
head(numdata)
tail(numdata)
summary(numdata)
a=table(numdata$q1)
a
a=table(numdata$q57)
a
names(a)
barplot(a)
library(plyr)
temp <- count(numdata, c('numdata$q1','numdata$q2r1'))
str(temp)
b=table(numdata$q1,numdata$q2r1)
b
barplot(b)
hist(numdata$q1)
hist(numdata$q2r1)
### Creating subsets ###
numsub <- subset(numdata, select=c("q24r1","q24r2","q24r3","q25r1","q25r2","q25r3",
"q26r3","q26r4","q26r5"))
str(numsub)
summary(numsub)
a=table(numsub$q24r1)
a
barplot(a)
a=table(numsub$q25r1)
a
barplot(a)
b=table(numsub$q24r1,numsub$q25r1)
b
barplot(b)
#rcorr(as.matrix(numsub), type="pearson")
require(corrplot)
numsubcorrelation <- cor(numsub)
corrplot(numsubcorrelation)
mcor <- cor(numsub)
corrplot(mcor, method="shade", shade.col=NA, tl.col="black")
corrplot(numsubcorrelation, method="shade", addCoef.col="black",
addCoefasPercent=TRUE ,type="lower", shade.col=NA, tl.col="black",
tl.srt=45, addcolorlabel="no", order="AOE",insig = "p-value")
###################################################
### Create a 'scree' plot to determine the num of clusters
#####################################################
dev.off()
wssplot <- function(numsub, nc=15, seed=1234) {
wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(2:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
######################################
### Create a Kmeans with 5 clusters
#########################################
clusterresults <- kmeans(numsub,5)
wssplot <- function(numsub, nc=15, seed=1234) {
wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(2:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
######################################
### Create a Kmeans with 5 clusters
#########################################
clusterresults <- kmeans(numsub,5)
library(factoextra)
wssplot <- function(numsub, nc=15, seed=1234) {
wss <- (nrow(numsub)-1)*sum(apply(numsub,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(numsub, centers=i)$withinss)}
plot(2:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(numsub)
numsub
factoextra::fviz_cluster(clusterresults,data = numsub)
factoextra::fviz_cluster(clusterresults,data = numsub,ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic())
factoextra::fviz_cluster(clusterresults,data = numsub,ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic(),stand = T,axes = c(1,3))
factoextra::fviz_cluster(clusterresults,data = numsub,ellipse.type = "t", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
labelsize = 3,
ggtheme = theme_classic(),stand = T,axes = c(2,3))
